;;;; This file is part of cl-multiplex
;;;; Copyright 2018 Guillaume LE VAILLANT
;;;; Distributed under the GNU GPL v3 or later.
;;;; See the file LICENSE for terms of use and distribution.


(defpackage :cl-multiplex/tests
  (:use :cl :fiveam :multiplex :octet-streams))

(in-package :cl-multiplex/tests)


(def-suite cl-multiplex
  :description "Unit tests for cl-multiplex")

(in-suite cl-multiplex)

(test make-multiplex-stream
  (with-octet-pipe (p)
    (is-true (make-multiplex-stream p 2))
    (with-multiplex-stream (m p 8)
      (is-true m))))

(test write-frame
  (with-octet-pipe (p)
    (let ((buffer (make-array 7 :element-type '(unsigned-byte 8))))
      (write-frame p 12 #(0 1 2 3 4))
      (is (= 7 (read-sequence buffer p)))
      (is (equalp #(12 5 0 1 2 3 4) buffer))))
  (with-octet-pipe (p)
    (let ((buffer (make-array 7 :element-type '(unsigned-byte 8))))
      (write-frame p 1 #(0 1 2 3 4 5 6 7 8 9) :start 2 :end 6)
      (is (= 6 (read-sequence buffer p)))
      (is (equalp #(1 4 2 3 4 5) (subseq buffer 0 6))))))

(test read-frame
  (with-octet-pipe (p)
    (write-sequence #(0 5 5 6 7 8 9) p)
    (multiple-value-bind (frame complete-p)
        (read-frame p)
      (is-true complete-p)
      (destructuring-bind (channel length data data-length)
          frame
        (is (= 0 channel))
        (is (= 5 length))
        (is (= 5 data-length))
        (is (equalp #(5 6 7 8 9) (subseq data 0 5))))))
  (with-octet-pipe (p)
    (multiple-value-bind (frame complete-p)
        (read-frame p)
      (is-false complete-p)
      (destructuring-bind (channel length data data-length)
          frame
        (declare (ignore data))
        (is-false channel)
        (is-false length)
        (is (= 0 data-length)))))
  (with-octet-pipe (p)
    (write-sequence #(1) p)
    (multiple-value-bind (frame complete-p)
        (read-frame p)
      (is-false complete-p)
      (destructuring-bind (channel length data data-length)
          frame
        (declare (ignore data))
        (is (= 1 channel))
        (is-false length)
        (is (= 0 data-length)))))
  (with-octet-pipe (p)
    (write-sequence #(2 123) p)
    (multiple-value-bind (frame complete-p)
        (read-frame p)
      (is-false complete-p)
      (destructuring-bind (channel length data data-length)
          frame
        (declare (ignore data))
        (is (= 2 channel))
        (is (= 123 length))
        (is (= 0 data-length)))))
  (with-octet-pipe (p)
    (write-sequence #(0 5 1 2 3) p)
    (multiple-value-bind (frame complete-p)
        (read-frame p)
      (is-false complete-p)
      (destructuring-bind (channel length data data-length)
          frame
        (is (= 0 channel))
        (is (= 5 length))
        (is (= 3 data-length))
        (is (equalp #(1 2 3) (subseq data 0 3))))))
  (with-octet-pipe (p)
    (write-sequence #(0 5 1 2 3) p)
    (multiple-value-bind (frame complete-p)
        (read-frame p)
      (is-false complete-p)
      (write-sequence #(4 5) p)
      (multiple-value-bind (frame complete-p)
          (read-frame p :incomplete-frame frame)
        (is-true complete-p)
        (destructuring-bind (channel length data data-length)
            frame
          (is (= 0 channel))
          (is (= 5 length))
          (is (= 5 data-length))
          (is (equalp #(1 2 3 4 5) (subseq data 0 5)))))))
  (with-octet-pipe (p)
    (write-sequence #(0 100 1 2 3) p)
    (multiple-value-bind (frame complete-p)
        (handler-bind
            ((frame-too-big (lambda (c)
                              (declare (ignore c))
                              (invoke-restart 'process-frame))))
          (read-frame p :max-frame-size 10))
      (is-false complete-p)
      (destructuring-bind (channel length data data-length)
          frame
        (is (= 0 channel))
        (is (= 100 length))
        (is (= 3 data-length))
        (is (equalp #(1 2 3) (subseq data 0 3))))))
  (with-octet-pipe (p)
    (write-sequence #(0 100 1 2 3) p)
    (multiple-value-bind (frame complete-p)
        (handler-bind
            ((frame-too-big (lambda (c)
                              (declare (ignore c))
                              (invoke-restart 'drop-frame))))
          (read-frame p :max-frame-size 10))
      (is-false complete-p)
      (destructuring-bind (channel length data data-length)
          frame
        (declare (ignore data))
        (is-false channel)
        (is-false length)
        (is (= 0 data-length))))))

(test multiplex
  (with-octet-pipe (p)
    (with-multiplex-stream (m p 1)
      (let ((buffer (make-array 7 :element-type '(unsigned-byte 8))))
        (write-data #(0 1 2 3 4) m 0)
        (finish-multiplex-output m)
        (is (= 7 (read-sequence buffer p)))
        (is (equalp #(0 5 0 1 2 3 4) buffer))))
    (with-multiplex-stream (m p 2)
      (let ((buffer (make-array 7 :element-type '(unsigned-byte 8))))
        (write-data #(0 1 2 3 4) m 0)
        (write-data #(5 6 7 8 9) m 1)
        (finish-multiplex-output m)
        (is (= 7 (read-sequence buffer p)))
        (is (equalp #(0 5 0 1 2 3 4) buffer))
        (is (= 7 (read-sequence buffer p)))
        (is (equalp #(1 5 5 6 7 8 9) buffer))))
    (with-multiplex-stream (m p 3)
      (let ((buffer (make-array 7 :element-type '(unsigned-byte 8))))
        (write-data #(0 1 2 3 4) m 0)
        (write-data #(5 6 7 8 9) m 1)
        (write-data #(10 11 12 13 14) m 2)
        (finish-multiplex-output m)
        (is (= 7 (read-sequence buffer p)))
        (is (equalp #(0 5 0 1 2 3 4) buffer))
        (is (= 7 (read-sequence buffer p)))
        (is (equalp #(1 5 5 6 7 8 9) buffer))
        (is (= 7 (read-sequence buffer p)))
        (is (equalp #(2 5 10 11 12 13 14) buffer))))
    (with-multiplex-stream (m p 3)
      (let ((buffer (make-array 25 :element-type '(unsigned-byte 8))))
        (write-data #(0 1 2) m 0)
        (write-data #(10 11 12 13) m 2)
        (multiplex m)
        (write-data #(5 6 7 8 9) m 1)
        (write-data #(14) m 2)
        (multiplex m)
        (write-data #(3 4) m 0)
        (finish-multiplex-output m)
        (is (= 25 (read-sequence buffer p)))
        (is (equalp #(0 3 0 1 2 2 4 10 11 12 13 1 5 5 6 7 8 9 2 1 14 0 2 3 4) buffer))))))

(test demultiplex
  (with-octet-pipe (p)
    (with-multiplex-stream (m p 1)
      (let ((buffer (make-array 5 :element-type '(unsigned-byte 8))))
        (write-sequence #(0 5 0 1 2 3 4) p)
        (is-true (demultiplex m))
        (is (= 5 (read-data buffer m 0)))
        (is (equalp #(0 1 2 3 4) buffer))))
    (with-multiplex-stream (m p 2)
      (let ((buffer (make-array 5 :element-type '(unsigned-byte 8))))
        (write-sequence #(0 5 0 1 2 3 4) p)
        (write-sequence #(1 5 5 6 7 8 9) p)
        (is-true (demultiplex m))
        (is (= 5 (read-data buffer m 0)))
        (is (equalp #(0 1 2 3 4) buffer))
        (is (= 5 (read-data buffer m 1)))
        (is (equalp #(5 6 7 8 9) buffer))))
    (with-multiplex-stream (m p 3)
      (let ((buffer (make-array 5 :element-type '(unsigned-byte 8))))
        (write-sequence #(0 5 0 1 2 3 4) p)
        (write-sequence #(1 5 5 6 7 8 9) p)
        (write-sequence #(2 5 10 11 12 13 14) p)
        (is-true (demultiplex m))
        (is (= 5 (read-data buffer m 0)))
        (is (equalp #(0 1 2 3 4) buffer))
        (is (= 5 (read-data buffer m 1)))
        (is (equalp #(5 6 7 8 9) buffer))
        (is (= 5 (read-data buffer m 2)))
        (is (equalp #(10 11 12 13 14) buffer))))
    (with-multiplex-stream (m p 3)
      (let ((buffer (make-array 5 :element-type '(unsigned-byte 8))))
        (write-sequence #(0 3 0 1) p)
        (is-false (demultiplex m))
        (write-sequence #(2) p)
        (is-true (demultiplex m))
        (write-sequence #(2) p)
        (is-false (demultiplex m))
        (write-sequence #(4) p)
        (is-false (demultiplex m))
        (write-sequence #(10 11 12 13 1 5 5 6) p)
        (is-true (demultiplex m))
        (write-sequence #(7 8 9 2 1 14 0 2 3 4) p)
        (is-true (demultiplex m))
        (is (= 5 (read-data buffer m 0)))
        (is (equalp #(0 1 2 3 4) buffer))
        (is (= 5 (read-data buffer m 1)))
        (is (equalp #(5 6 7 8 9) buffer))
        (is (= 5 (read-data buffer m 2)))
        (is (equalp #(10 11 12 13 14) buffer))
        (is (= 0 (read-data buffer m 0)))
        (is (= 0 (read-data buffer m 1)))
        (is (= 0 (read-data buffer m 2)))))))

(test channel-stream
  (with-connected-octet-streams (stream1 stream2)
    (with-multiplex-stream (m1 stream1 2)
      (with-multiplex-stream (m2 stream2 2)
        (let ((s1-0 (get-channel-stream m1 0))
              (s1-1 (get-channel-stream m1 1))
              (s2-0 (get-channel-stream m2 0))
              (s2-1 (get-channel-stream m2 1)))
          (dotimes (i 500)
            (write-byte 18 s1-0)
            (write-byte 166 s1-1)
            (write-byte 5 s2-0)
            (write-byte 243 s2-1))
          (finish-multiplex-output m1)
          (finish-multiplex-output m2)
          (is-true (demultiplex m1))
          (is-true (demultiplex m2))
          (is-true (loop repeat 500
                         always (= 5 (read-byte s1-0 nil :eof))))
          (is-true (loop repeat 500
                         always (= 243 (read-byte s1-1 nil :eof))))
          (is-true (loop repeat 500
                         always (= 18 (read-byte s2-0 nil :eof))))
          (is-true (loop repeat 500
                         always (= 166 (read-byte s2-1 nil :eof))))
          (is (eql :eof (read-byte s1-0 nil :eof)))
          (is (eql :eof (read-byte s1-1 nil :eof)))
          (is (eql :eof (read-byte s2-0 nil :eof)))
          (is (eql :eof (read-byte s2-1 nil :eof))))))))

(test clear-input
  (with-octet-pipe (p)
    (with-multiplex-stream (m p 3)
      (let ((buffer (make-array 5 :element-type '(unsigned-byte 8))))
        (write-sequence #(0 5 0 1 2 3 4) p)
        (write-sequence #(1 5 5 6 7 8 9) p)
        (is-true (demultiplex m))
        (clear-multiplex-input m)
        (write-sequence #(2 5 10 11 12 13 14) p)
        (is-true (demultiplex m))
        (is (= 0 (read-data buffer m 0)))
        (is (= 0 (read-data buffer m 1)))
        (is (= 5 (read-data buffer m 2)))
        (is (equalp #(10 11 12 13 14) buffer))))
    (with-multiplex-stream (m p 3)
      (let ((buffer (make-array 5 :element-type '(unsigned-byte 8))))
        (write-sequence #(0 5 0 1 2 3 4) p)
        (write-sequence #(1 5 5 6 7 8 9) p)
        (write-sequence #(2 5 10 11 12 13 14) p)
        (is-true (demultiplex m))
        (clear-channel-input m 1)
        (is (= 5 (read-data buffer m 0)))
        (is (equalp #(0 1 2 3 4) buffer))
        (is (= 0 (read-data buffer m 1)))
        (is (= 5 (read-data buffer m 2)))
        (is (equalp #(10 11 12 13 14) buffer))))
    (with-multiplex-stream (m p 3)
      (let ((buffer (make-array 5 :element-type '(unsigned-byte 8))))
        (write-sequence #(0 5 0 1 2 3 4) p)
        (write-sequence #(1 5 5 6 7) p)
        (is-true (demultiplex m))
        (clear-multiplex-input m)
        (write-sequence #(8 9 2 5 10 11 12 13 14) p)
        (is-true (demultiplex m))
        (is (= 0 (read-data buffer m 0)))
        (is (= 5 (read-data buffer m 1)))
        (is (equalp #(5 6 7 8 9) buffer))
        (is (= 5 (read-data buffer m 2)))
        (is (equalp #(10 11 12 13 14) buffer))))))
